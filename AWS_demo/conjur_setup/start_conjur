#!/bin/bash

source ./aws.config

# This script deletes running instances and brings up 
#   initialized Conjur Master, Follower & CLI nodes.
#   It also setups the Summon AWS secrets provider.

#################
main() {
  ./stop_conjur
  master_up
  cli_up
  follower_up
  enable_iam_authn $CONJUR_FOLLOWER_CONTAINER_NAME
}

#################
master_up() {
  # Bring up Conjur Master node
  sudo docker run -d \
    --name $CONJUR_MASTER_CONTAINER_NAME \
    --label role=conjur_node \
    -e CONJUR_AUTHENTICATORS="authn-iam/$AUTHN_IAM_SERVICE_ID" \
    -p "$CONJUR_MASTER_PORT:443" \
    -p "$CONJUR_MASTER_PGSYNC_PORT:5432" \
    -p "$CONJUR_MASTER_PGAUDIT_PORT:1999" \
    --restart always \
    --security-opt seccomp:unconfined \
    $CONJUR_APPLIANCE_IMAGE 

  echo "Waiting 15 seconds for Conjur Master container to initialize before configuring..."
  sleep 15

  # Configure Conjur Master node
  echo "Configuring Conjur master..."
  sudo docker exec $CONJUR_MASTER_CONTAINER_NAME	 \
                evoke configure master    		 \
                -h $CONJUR_MASTER_HOST_NAME		 \
                -p $CONJUR_ADMIN_PASSWORD		 \
		--master-altnames "$MASTER_ALTNAMES"	 \
		--follower-altnames "$FOLLOWER_ALTNAMES" \
    		--accept-eula				 \
                $CONJUR_ACCOUNT

  mkdir -p $CACHE_DIR
  echo "Caching Conjur master cert ..."
  rm -f $CONJUR_CERT_FILE
  sudo docker exec $CONJUR_MASTER_CONTAINER_NAME cat /opt/conjur/etc/ssl/conjur.pem > $CONJUR_CERT_FILE

  echo "Caching Conjur Follower seed files..."
  rm -f $FOLLOWER_SEED_FILE
  sudo docker exec $CONJUR_MASTER_CONTAINER_NAME evoke seed follower conjur-follower > $FOLLOWER_SEED_FILE
}

#################
cli_up() {

  # Bring up CLI node
  # If docker-compose installed, replace "docker run..." 
  #   with "docker-compose up -d cli"
  sudo docker run -d \
    --name $CLI_CONTAINER_NAME \
    --label role=cli \
    --restart always \
    --security-opt seccomp:unconfined \
    --entrypoint sh \
    $CLI_IMAGE_NAME \
    -c "sleep infinity"

  # if not relying on DNS - add entry for master host name to cli container's /etc/hosts
#  sudo docker exec $CLI_CONTAINER_NAME \
#    bash -c "echo \"$CONJUR_MASTER_HOST_IP    $CONJUR_MASTER_HOST_NAME\" >> /etc/hosts"

  # Initialize connection to service (create .conjurrc and conjur-xx.pem cert)
  sudo docker exec $CLI_CONTAINER_NAME \
    bash -c "echo yes | conjur init -u $CONJUR_APPLIANCE_URL -a $CONJUR_ACCOUNT"

  # Login as admin
  sudo docker exec $CLI_CONTAINER_NAME \
    conjur authn login -u admin -p $CONJUR_ADMIN_PASSWORD
}

############################
follower_up() {
  # Bring up Conjur Follower node
  sudo docker run -d \
    --name $CONJUR_FOLLOWER_CONTAINER_NAME \
    --label role=conjur_node \
    -p "$CONJUR_FOLLOWER_PORT:443" \
    -e "CONJUR_AUTHENTICATORS=$CONJUR_AUTHENTICATORS" \
    --restart always \
    --security-opt seccomp:unconfined \
    $CONJUR_APPLIANCE_IMAGE

  if $NO_DNS; then
    # add entry to follower's /etc/hosts so $CONJUR_MASTER_HOST_NAME resolves
    sudo docker exec -it $CONJUR_FOLLOWER_CONTAINER_NAME \
        bash -c "echo \"$CONJUR_MASTER_HOST_IP $CONJUR_MASTER_HOST_NAME\" >> /etc/hosts"
  fi

  echo "Initializing Conjur Follower"
  sudo docker cp $FOLLOWER_SEED_FILE \
                $CONJUR_FOLLOWER_CONTAINER_NAME:/tmp/follower-seed.tar
  sudo docker exec $CONJUR_FOLLOWER_CONTAINER_NAME \
                evoke unpack seed /tmp/follower-seed.tar
  sudo docker exec $CONJUR_FOLLOWER_CONTAINER_NAME \
                evoke configure follower -p $CONJUR_MASTER_PORT

  echo "Follower configured."
}

#################
enable_iam_authn() {
  local container_name=$1; shift
  ./load_policy_REST.sh root policy/authn-iam.yaml
  sudo docker exec $container_name \
	  evoke variable set CONJUR_AUTHENTICATORS authn,authn-iam/$AUTHN_IAM_SERVICE_ID
}

main "$@"
